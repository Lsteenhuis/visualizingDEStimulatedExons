#B_STREP <- read.table("counted_files//B_RPMI_24_counted.txt")
#colnames(B_STREP) <- c("EXON","ReadCountSTREP")
#strep_rc <- B_STREP[,2]
#B_RPMI <- read.table("counted_files//B_Strep_Pneu_24h_counted.txt")
#colnames(B_RPMI) <- c("EXON","ReadCountRPMI")
#rpmi_rc <- B_RPMI[,2]
#exonList = B_RPMI[,1]

#rc_stimuli <- data.frame(exonList,strep_rc,rpmi_rc)

#delete rows where read counts are 0
#rc_stimuli_noZero <- rc_stimuli[!(rc_stimuli$strep_rc==0 & rc_stimuli$rpmi_rc==0),]

#log.rc.stimuli <- rc_stimuli_noZero
#get log of columns from rc_stimuli_noNA and set infinte values to 0
#log.rc.stimuli[,2:3] <- log(rc_stimuli_noZero[,2:3])
#log.rc.stimuli.noInf <- log.rc.stimuli
#log.rc.stimuli.noInf[,2:3] <- replace(log.rc.stimuli[,2:3],log.rc.stimuli[,2:3]=="-Inf",0)

#do PCA on log.rc.stimuli.noInf
#rc.pca <- prcomp(log.rc.stimuli.noInf[,2:3],
#                 center = TRUE,
#                 scale. = TRUE
#                )
#plot(rc.pca, type="l",main="PCA of read counts")

#file.create("DEXSEQ/DEXSEQ/counted_files//B_Strep_Pneu_24h_counted.test.txt")
#df <- data.frame(rc_stimuli[,1:2])
#write.table(df,file="DEXSEQ/DEXSEQ/counted_files//B_Strep_Pneu_24h_counted.test.txt",sep = "\t",col.names=FALSE,row.names = FALSE, quote = FALSE)


########################################################################
# analyzing rc_stimuli
#rc_stimuli[rc_stimuli[,2] == max(rc_stimuli[,2]),]
#summary(rc_stimuli[-644357,])
#length(which(rc_stimuli[,2] > 300))
#summary(rc_stimuli[rc_stimuli[,2] < 300,])
#dim(rc_stimuli)
#summary(rc_stimuli)
#5633948/nrow(rc_stimuli)

#summary(rc_stimuli_noZero)

#length(which(rc_stimuli[,2] > 300))

#vignette('DEXSeq')
########################################################################
#scatterplot 
#plot_colors <- c("blue","red")
#plot(rc_stimuli_noZero$strep_rc , rc_stimuli_noZero$rpmi_rc ,xlab="Read counts strep", ylab="Read count RPMI",log="xy", col=plot_colors,pch=46)


########################################################################
#DEXSEQ


countFiles = list.files("/groups/umcg-wijmenga/tmp04/umcg-lsteenhuis/DEXSEQ/counted_files/", pattern="txt$", full.names = TRUE)
countFiles
flattenedFile = "/groups/umcg-wijmenga/tmp04/umcg-lsteenhuis/DEXSEQ/gff/Hsap.GRCh37.75.gff"
sampleTable = data.frame(
  row.names = c("A_RPMI_24","B_RPMI_24","C_RPMI_24","D_RPMI_24","E_RPMI_24","F_RPMI_24","G_RPMI_24","H_RPMI_24",
                "A_STREP_24","B_STREP_24","C_STREP_24","D_STREP_24","E_STREP_24","F_STREP_24","G_STREP_24","H_STREP_24"),
  condition = c("RPMI","RPMI","RPMI","RPMI","RPMI","RPMI","RPMI","RPMI", 
                "STREP", "STREP" ,"STREP", "STREP", "STREP", "STREP", "STREP", "STREP"),
  libType = c("single-end"))

suppressPackageStartupMessages( library( "DEXSeq" ) )
dxd = DEXSeqDataSetFromHTSeq(
  countFiles,
  sampleData=sampleTable,
  design= ~ sample + exon + condition:exon,
  flattenedfile=flattenedFile)


############################################################################
#analyzing dxd
#colData(dxd)

#head( counts(dxd), 10 )

#split( seq_len(ncol(dxd)),  colData(dxd)$exon )

#head( featureCounts(dxd), 5)

#head( rowRanges(dxd), 3)

#sampleAnnotation( dxd )


###############
# analysis

dxd = estimateSizeFactors( dxd )
dxd = estimateDispersions( dxd,  fitType="parametric")
svg("/groups/umcg-wijmenga/tmp04/umcg-lsteenhuis/DEXSEQ/plots/plot_test/plots.svg")
plotDispEsts( dxd )
dev.off()


